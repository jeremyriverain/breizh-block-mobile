// Mocks generated by Mockito 5.4.2 from annotations
// in breizh_blok_mobile/test/unit/blocs/boulder_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:breizh_blok_mobile/app_http_client.dart' as _i4;
import 'package:breizh_blok_mobile/database/app_database.dart' as _i2;
import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppDatabase_0 extends _i1.SmartFake implements _i2.AppDatabase {
  _FakeAppDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClient_1 extends _i1.SmartFake implements _i3.Client {
  _FakeClient_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppHttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppHttpClient extends _i1.Mock implements _i4.AppHttpClient {
  @override
  _i2.AppDatabase get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeAppDatabase_0(
          this,
          Invocation.getter(#database),
        ),
        returnValueForMissingStub: _FakeAppDatabase_0(
          this,
          Invocation.getter(#database),
        ),
      ) as _i2.AppDatabase);
  @override
  _i3.Client get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeClient_1(
          this,
          Invocation.getter(#httpClient),
        ),
        returnValueForMissingStub: _FakeClient_1(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i3.Client);
  @override
  _i5.Future<String> get(
    Uri? uri, {
    Map<String, String>? headers,
    Duration? timeout = const Duration(seconds: 7),
    bool? offlineFirst = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [uri],
          {
            #headers: headers,
            #timeout: timeout,
            #offlineFirst: offlineFirst,
          },
        ),
        returnValue: _i5.Future<String>.value(''),
        returnValueForMissingStub: _i5.Future<String>.value(''),
      ) as _i5.Future<String>);
  @override
  String normalizeRequestPath(Uri? uri) => (super.noSuchMethod(
        Invocation.method(
          #normalizeRequestPath,
          [uri],
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
}
